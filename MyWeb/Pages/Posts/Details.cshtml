@page
@using LibraryWeb.Model
@using Microsoft.AspNetCore.Http
@model MyWeb.Pages.Posts.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<link rel="stylesheet" href="~/css/PostDetail.css" />

<div class="container-fluid my-detail-container">
    <div class="react-container ">
        <div class="react-item" id="btnLike">
            @if (Model.IsLiked)
            {
                <button class="like-btn liked">
                    <ion-icon class="icon like-icon" name="heart-outline" style="display:none"></ion-icon>
                    <img class="heart-icon" src="~/img/heart.png" style="display:block" />
                </button>
            }
            else
            {
                <button class="like-btn">
                    <ion-icon class="icon like-icon" name="heart-outline" style="display:block"></ion-icon>
                    <img class="heart-icon" src="~/img/heart.png" style="display:none" />
                </button>
            }
            <p class="like-amount">@Model.Post.LikesTotal</p>
        </div>
        <div class="react-item">
            <ion-icon class="icon mb-3" name="eye-outline"></ion-icon>
            <p class="view-amount">@Model.Post.Views</p>
        </div>
    </div>
    <div class="main-detail-container">
        <div class="your-action-btn">
            <a class="menu-btn" onclick="handleMenu()">
                <ion-icon name="ellipsis-horizontal-outline"></ion-icon>
            </a>
            <div class="dropdown-group">
                <div class="dropdown-items">
                    <a class="edit-btn dropdown-item">
                        <ion-icon name="create-outline"></ion-icon>
                        <p>Edit</p>
                    </a>
                    <a class="delete-btn dropdown-item">
                        <ion-icon name="trash-outline"></ion-icon>
                        <p>Delete</p>
                    </a>
                </div>
            </div>
        </div>
        <div class="owner">
            <img src="~/img/user.png" />
            <div class="infos">
                <a href="/" class="name text-decoration-none">@Model.Post.UserPost.FirstName @Model.Post.UserPost.LastName</a>
                <p class="date">@Model.Post.CreatedDate.ToString("dd MMMM yyyy h:mm tt")</p>
            </div>
        </div>
        <div class="posts-body">
            <div class="title">
                <h1>@Model.Post.Title</h1>
            </div>
            <div class="tags">
                @foreach (string tmp in @Model.Post.GetTagsList())
                {
                    <a class="tag text-dark text-decoration-none" asp-route-searchTag="@tmp" asp-area="Posts" asp-page="Index">
                        #@tmp
                    </a>
                }
            </div>
            <div class="post-content">
                <p>@Model.Post.PostContent</p>
            </div>
            <hr />
            <div class="discussion">
                <div class="discussion-top">
                    <p>Comments <span id="commentsTotal" class="discuss-amount">(@Model.Post.CommentsTotal)</span></p>
                </div>
                <div class="discussion-bottom">
                    <img src="~/img/user.png" />
                    <div class="your-cmt">
                        <textarea id="commentContent" placeholder="Add comment..."
                                  class="comment-textarea"
                                  onfocus="handleFocus()"
                                  oninput="handleInput()"></textarea>
                        <div class="comment-btn-group">
                            <button id="btnCommentRoot" class="submit-btn" disabled>
                                Submit
                            </button>
                        </div>
                    </div>
                </div>
                <div class="comments">

                    <span id="commentsForeach"></span> @*make new comment*@

                    @foreach (Comment cmt in @Model.Post.Comments.OrderBy(c => c.CreatedDate).Reverse())
                    {
                        <div class="comment-root">
                            <div class="content">
                                <img src="~/img/user.png" />
                                <div style="width: 100%">
                                    <div class="comment">
                                        <div class="d-flex align-items-center">
                                            <div class="user">
                                                <a href="#" class="cmt-user text-decoration-none">@cmt.UserComment.FirstName @cmt.UserComment.LastName</a>
                                            </div>
                                            <p class="cmt-time ml-2 ">@cmt.CreatedDate.ToString("dd MMMM yyyy h:mm tt")</p>
                                        </div>

                                        <div style="word-break: break-word">
                                            @cmt.CommentContent
                                        </div>
                                    </div>
                                    <div class="rep-btn">
                                        <button class="repBtn" onclick="handleRep('@cmt.CommentId.ToString()')">
                                            <ion-icon name="chatbubbles-outline"></ion-icon>
                                            Reply
                                        </button>
                                        <div id="@cmt.CommentId.ToString()" class="rep-form" style="display:none">
                                            @{
                                                var textAreaId = "txt" + cmt.CommentId;
                                                var repBtnId = "repBtn" + cmt.CommentId;
                                                <textarea placeholder="Reply..."
                                                          id="@textAreaId"
                                                          class="rep-comment-textarea"
                                                          oninput="handleInput('@textAreaId', '@repBtnId')"></textarea>

                                                <div class="rep-comment-btn-group">
                                                    <button id="@repBtnId" class="submit-rep-btn" disabled>
                                                        Submit
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    @if (cmt.CommentReplies.Count > 0)
                                    {
                                        @foreach (CommentReply cr in cmt.CommentReplies.OrderBy(cr => cr.CreatedDate).Reverse())
                                        {
                                            <div class="comment-rep">
                                                <div class="content">
                                                    <img src="~/img/user.png" />
                                                    <div style="width: 100%">
                                                        <div class="comment">
                                                            <div class="d-flex align-items-center">
                                                                <div class="user">
                                                                    <a href="#" class="cmt-user text-decoration-none">@cr.UserReply.FirstName @cr.UserReply.LastName</a>
                                                                </div>
                                                                <p class="cmt-time ml-2 ">@cr.CreatedDate.ToString("dd MMMM yyyy h:mm tt")</p>
                                                            </div>

                                                            <div style="word-break: break-word">
                                                                @cr.CommentReplyContent
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }

                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="owner-info-container">
        <div class="owner">
            <img src="~/img/user.png" />
            <div class="infos">
                <a href="/" class="name text-decoration-none">@Model.Post.UserPost.FirstName @Model.Post.UserPost.LastName</a>
            </div>
        </div>
        <div class="info">
            <p class="info-title text-uppercase">location</p>
            <p>@Model.Post.UserPost.Address</p>
        </div>
        <div class="info">
            <p class="info-title text-uppercase">role</p>
            <p>@Model.Post.UserPost.Role.RoleName</p>
        </div>
        <div class="info">
            <p class="info-title text-uppercase">phone number</p>
            <p>@Model.Post.UserPost.PhoneNumber</p>
        </div>
    </div>
</div>

<script>
    const likeBtn = document.querySelector('.like-btn');
    const likeImg = document.querySelector('.heart-icon');
    const likeIcon = document.querySelector('.like-icon');
    const commentGroup = document.querySelector('.comment-btn-group');
    const commentTextArea = document.querySelector('.comment-textarea');
    const commentSubmitBtn = document.querySelector('.submit-btn');

    // handle menu icon in post
    const dropdownMenu = document.querySelector('.dropdown-group');
    const menuBtn = document.querySelector('.menu-btn');

    const repBtnn = document.querySelector('.repBtn');
    function toggleClass() {
        if (@Model.IsLiked == true) {
            console.log("liked > unlike");
    @Model.IsLiked = false;
            likeBtn.classList.remove('liked');
            likeImg.style.display = 'none';
            likeIcon.style.display = 'block';
        } else {
    @Model.IsLiked = true;
            console.log("unliked > like");
            likeBtn.classList.add('liked');
            likeImg.style.display = 'block';
            likeIcon.style.display = 'none';
        }
    }
    function handleFocus() {
        commentGroup.style.display = 'block';
        commentTextArea.style.height = '128px';
        commentTextArea.style.border = '2px solid #150ec9';
    }
    function handleInput(commentId, repBtnId) { // bug here
        var repTextAreaId = '' + commentId + '';
        var repButtonId = '' + repBtnId + '';

        var repTextArea = document.getElementById(repTextAreaId);
        var repBtn = document.getElementById(repButtonId);

        if (commentTextArea.value.toString().trim() == "") {
            commentSubmitBtn.setAttribute('disabled', '')
            commentSubmitBtn.classList.remove('allowed')
        } else {
            commentSubmitBtn.classList.add('allowed')
            commentSubmitBtn.removeAttribute('disabled')
        }

        if (repTextArea != null) {
            if (repTextArea.value.toString().trim() == "") {
                repBtn.setAttribute('disabled', '')
                repBtn.classList.remove('allowed')
            } else {
                repBtn.classList.add('allowed')
                repBtn.removeAttribute('disabled')
            }
        }

    }
    function handleRep(commentId) {
        var tmp = '' + commentId + '';
        console.log(tmp);
        var repForm = document.getElementById(tmp);
        repForm.style.display = 'block';
        repBtnn.style.display = 'none';
    }

    //function handle open menu
    function handleMenu() {
        dropdownMenu.style.display = 'block';
    }
    document.addEventListener('click', function handleClickOutsideMenu(event) {
        if (!dropdownMenu.contains(event.target) && !menuBtn.contains(event.target)) {
            dropdownMenu.style.display = 'none';
        }
    });

</script>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.10.1/dist/sweetalert2.all.min.js"></script>
<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/sweetalert2@10.10.1/dist/sweetalert2.min.css'>


@*like action*@
<script>
    $(document).ready(function() {
        $('#btnLike').click(function() {
            $.ajax({
                type: 'GET',
                url: '/Posts/Details?handler=LikeAction&postid=@Model.Post.PostId.ToString()',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(result) {
                    var htmlContent = '';
                    if (result[0] == 1) { // active like icon BUG chỗ lấy heart.png
                        console.log('btnLike was actived!');
                        htmlContent += `<button class="like-btn liked">
                                                                            <ion-icon class="icon like-icon" name="heart-outline" style="display:none"></ion-icon>
                                                                            <img class="heart-icon" src="../img/heart.png" style="display:block" />
                                                                        </button>`;
                        htmlContent += `<p class="like-amount">` + result[1] + `</p>`;
                        $('#btnLike').html(htmlContent);
                    } else if (result[0] == 2) { // inactive like icon BUG chỗ lấy heart.png
                        console.log('btnLike was inactived!');
                        htmlContent += `<button class="like-btn">
                                                                            <ion-icon class="icon like-icon" name="heart-outline" style="display:block"></ion-icon>
                                                                            <img class="heart-icon" src="../img/heart.png" style="display:none" />
                                                                        </button>`;
                        htmlContent += `<p class="like-amount">` + result[1] + `</p>`;
                        $('#btnLike').html(htmlContent);
                    }
                    else { // result[0] == 3 Nhựt dô chỉnh lại sweetalert!!!
                        //alert("Bạn cần phải login trước khi thả tym!");
                        Swal.fire({
                            icon: 'error',
                            title: 'Hold up...',
                            text: 'You need to login before like this content!'
                        });
                    }
                }, error: function(error) {
                    console.log(error);
                }
            });
        });
    });
</script>

@*comment action*@
<script>
    $(document).ready(function() {
        $('#btnCommentRoot').click(function() {
            $.ajax({
                type: 'GET',
                url: '/Posts/Details?handler=CommentAction&content='
                    + $('#commentContent').val() + '&postid=@Model.Post.PostId.ToString()',
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function(result) {
                    if (!result) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Hold up...',
                            text: 'you need to login before comment!'
                        });
                    } else {
                        var commentId = result.commentId;

                        var textAreaId = 'txt' + commentId;
                        var repBtnId = 'repBtn' + commentId;

                        var firstName = result.firstName;
                        var lastName = result.lastName;
                        var createdAt = result.createdAt;
                        var commentsTotal = result.commentsTotal;
                        console.log('Inserting comment ...');
                        $('#commentsTotal').html('(' + commentsTotal + ')'); // update comments total

                        // add 1 comment div on top comments list
                        const commentsForeach = document.getElementById("commentsForeach");
                        let content = `<div class="comment-root">
                                                <div class="content">
                                                    <img src="../img/user.png" />
                                                    <div style="width: 100%">
                                                        <div class="comment">
                                                            <div class="d-flex align-items-center">
                                                                <div class="user">
                                                                    <a href="#" class="cmt-user text-decoration-none">` + firstName + ` ` + lastName + `</a>
                                                                </div>
                                                                <p class="cmt-time ml-2 ">` + createdAt + `</p>
                                                            </div>

                                                            <div>` + $('#commentContent').val() + `</div>
                                                        </div>
                                                        <div class="rep-btn">
                                                            <button class="repBtn" onclick="handleRep('` + commentId + `')">
                                                                <ion-icon name="chatbubbles-outline"></ion-icon>
                                                                Reply
                                                            </button>
                                                            <div id="` + commentId + `" class="rep-form" style="display:none">
                                                                <textarea id="` + textAreaId + `" placeholder="Reply..."
                                                                      class="rep-comment-textarea"
                                                                      oninput="handleInput('` + textAreaId + `', '` + repBtnId + `')"></textarea>
                                                                <div class="rep-comment-btn-group">
                                                                    <button id="` + repBtnId + `" class="submit-rep-btn" disabled>
                                                                        Submit
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>`;
                        commentsForeach.insertAdjacentHTML("afterbegin", content);
                        $('#commentContent').val('');
                    }
                }, error: function(error) {
                    console.log(error);
                }
            });
        });
    });
</script>
