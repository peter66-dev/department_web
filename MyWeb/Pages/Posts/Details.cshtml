@page
@using LibraryWeb.Model
@using Microsoft.AspNetCore.Http
@model MyWeb.Pages.Posts.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<link rel="stylesheet" href="~/css/PostDetail.css" />

<div class="container-fluid my-detail-container">
    <div class="react-container ">
        <div class="react-item" id="btnLike">
            @if (Model.IsLiked)
            {
                <button class="like-btn liked">
                    <ion-icon class="icon like-icon" name="heart-outline" style="display:none"></ion-icon>
                    <img class="heart-icon" src="~/img/heart.png" style="display:block" />
                </button>
            }
            else
            {
                <button class="like-btn">
                    <ion-icon class="icon like-icon" name="heart-outline" style="display:block"></ion-icon>
                    <img class="heart-icon" src="~/img/heart.png" style="display:none" />
                </button>
            }
            <p class="like-amount">@Model.Post.LikesTotal</p>
        </div>
        <div class="react-item">
            <ion-icon class="icon mb-3" name="eye-outline"></ion-icon>
            <p class="view-amount">@Model.Post.Views</p>
        </div>
    </div>
    <div class="main-detail-container">
        <div class="owner">
            <img src="~/img/user.png" />
            <div class="infos">
                <a href="/" class="name text-decoration-none">@Model.Post.UserPost.FirstName @Model.Post.UserPost.LastName</a>
                <p class="date">@Model.Post.CreatedDate.ToString("dd MMMM yyyy h:mm tt")</p>
            </div>
        </div>
        <div class="posts-body">
            <div class="title">
                <h1>@Model.Post.Title</h1>
            </div>
            <div class="tags">
                @foreach (string tmp in @Model.Post.GetTagsList())
                {
                    <a class="tag text-dark text-decoration-none" asp-route-searchTag="@tmp" asp-area="Posts" asp-page="Index">
                        #@tmp
                    </a>
                }
            </div>
            <div class="post-content">
                <p>@Model.Post.PostContent</p>
            </div>
            <hr />
            <div class="discussion">
                <div class="discussion-top">
                    <p>Comments <span class="discuss-amount">(@Model.Post.CommentsTotal)</span></p>
                </div>
                <div class="discussion-bottom">
                    <img src="~/img/user.png" />
                    <form>
                        <textarea placeholder="Add comment..."
                                  class="comment-textarea"
                                  onfocus="handleFocus()"
                                  oninput="handleInput()"></textarea>
                        <div class="comment-btn-group">
                            <button class="submit-btn" disabled>
                                Submit
                            </button>
                        </div>
                    </form>

                </div>
                <div class="comments">
                    @foreach (Comment cmt in @Model.Post.Comments.OrderBy(c => c.CreatedDate).Reverse())
                    {
                        <div class="comment-root">
                            <div class="content">
                                <img src="~/img/user.png" />
                                <div>
                                    <div class="comment">
                                        <div class="d-flex align-items-center">
                                            <div class="user">
                                                <a href="#" class="cmt-user text-decoration-none">@cmt.UserComment.FirstName @cmt.UserComment.LastName</a>
                                            </div>
                                            <p class="cmt-time ml-2 ">@cmt.CreatedDate.ToString("dd MMMM yyyy h:mm tt")</p>
                                        </div>

                                        <div>
                                            @cmt.CommentContent
                                        </div>
                                    </div>
                                    <div class="rep-btn">
                                        <button class="repBtn" onclick="handleRep()">
                                            <ion-icon name="chatbubbles-outline"></ion-icon>
                                            Reply
                                        </button>
                                        <form id="rep-form">
                                            <textarea placeholder="Reply..."
                                                  class="rep-comment-textarea"
                                                  oninput="handleInput()"></textarea>
                                            <div class="rep-comment-btn-group">
                                                <button class="submit-rep-btn" disabled>
                                                    Submit
                                                </button>
                                            </div>
                                        </form>
                                    </div>

                                    @if (cmt.CommentReplies.Count > 0)
                                    {
                                        @foreach (CommentReply cr in cmt.CommentReplies.OrderBy(cr => cr.CreatedDate).Reverse())
                                        {
                                            <div class="comment-rep">
                                                <div class="content">
                                                    <img src="~/img/user.png" />
                                                    <div>
                                                        <div class="comment">
                                                            <div class="d-flex align-items-center">
                                                                <div class="user">
                                                                    <a href="#" class="cmt-user text-decoration-none">@cr.UserReply.FirstName @cr.UserReply.LastName</a>
                                                                </div>
                                                                <p class="cmt-time ml-2 ">@cr.CreatedDate.ToString("dd MMMM yyyy h:mm tt")</p>
                                                            </div>

                                                            <div>
                                                                @cr.CommentReplyContent
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }

                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="owner-info-container">
        <div class="owner">
            <img src="~/img/user.png" />
            <div class="infos">
                <a href="/" class="name text-decoration-none">@Model.Post.UserPost.FirstName @Model.Post.UserPost.LastName</a>
            </div>
        </div>
        <div class="info">
            <p class="info-title text-uppercase">location</p>
            <p>@Model.Post.UserPost.Address</p>
        </div>
        <div class="info">
            <p class="info-title text-uppercase">role</p>
            <p>@Model.Post.UserPost.Role.RoleName</p>
        </div>
        <div class="info">
            <p class="info-title text-uppercase">phone number</p>
            <p>@Model.Post.UserPost.PhoneNumber</p>
        </div>
    </div>
</div>

<script>
    const likeBtn = document.querySelector('.like-btn');
    const likeImg = document.querySelector('.heart-icon');
    const likeIcon = document.querySelector('.like-icon');
    const commentGroup = document.querySelector('.comment-btn-group');
    const commentTextArea = document.querySelector('.comment-textarea');
    const commentSubmitBtn = document.querySelector('.submit-btn');
    const repForm = document.querySelector('#rep-form');
    const repTextArea = document.querySelector('.rep-comment-textarea');
    const repBtn = document.querySelector('.submit-rep-btn');
    const repBtnn = document.querySelector('.repBtn');
    function toggleClass() {
        if (@Model.IsLiked == true) {
            console.log("liked > unlike");
    @Model.IsLiked = false;
            likeBtn.classList.remove('liked');
            likeImg.style.display = 'none';
            likeIcon.style.display = 'block';
        } else {
    @Model.IsLiked = true;
            console.log("unliked > like");
            likeBtn.classList.add('liked');
            likeImg.style.display = 'block';
            likeIcon.style.display = 'none';
        }
    }
    function handleFocus() {
        commentGroup.style.display = 'block';
        commentTextArea.style.height = '128px';
        commentTextArea.style.border = '2px solid #150ec9';
    }
    function handleInput() {
        if (commentTextArea.value.toString().trim() == "") {
            commentSubmitBtn.setAttribute('disabled', '')
            commentSubmitBtn.classList.remove('allowed')
        } else {
            commentSubmitBtn.classList.add('allowed')
            commentSubmitBtn.removeAttribute('disabled')
        }
        if (repTextArea.value.toString().trim() == "") {
            repBtn.setAttribute('disabled', '')
            repBtn.classList.remove('allowed')
        } else {
            repBtn.classList.add('allowed')
            repBtn.removeAttribute('disabled')
        }
    }
    function handleRep() {
        repForm.style.display = 'block';
        repBtnn.style.display = 'none';
    }
</script>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.19/dist/sweetalert2.all.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="sweetalert2.all.min.js"></script>

<script>
    $(document).ready(function() {
        $('#btnLike').click(function() {
            $.ajax({
                type: "GET",
                url: '/Posts/Details?handler=LikeAction&postid=@Model.Post.PostId.ToString()',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(result) {
                    var htmlContent = '';
                    if (result[0] == 1) { // active like icon BUG chỗ lấy heart.png
                        console.log('btnLike was actived!');
                        htmlContent += `<button class="like-btn liked">
                                            <ion-icon class="icon like-icon" name="heart-outline" style="display:none"></ion-icon>
                                            <img class="heart-icon" src="../img/heart.png" style="display:block" />
                                        </button>`;
                        htmlContent += `<p class="like-amount">` + result[1] + `</p>`;
                        $('#btnLike').html(htmlContent);
                    } else if (result[0] == 2) { // inactive like icon BUG chỗ lấy heart.png
                        console.log('btnLike was inactived!');
                        htmlContent += `<button class="like-btn">
                                            <ion-icon class="icon like-icon" name="heart-outline" style="display:block"></ion-icon>
                                            <img class="heart-icon" src="../img/heart.png" style="display:none" />
                                        </button>`;
                        htmlContent += `<p class="like-amount">` + result[1] + `</p>`;
                        $('#btnLike').html(htmlContent);
                    }
                    else { // result == 3 Nhựt dô chỉnh lại sweetalert!!!
                        alert("Bạn cần phải login trước khi thả tym hoặc gửi comment!");
                        const Swal = require('sweetalert2');
                        Swal.fire({
                            icon: 'warning',
                            title: 'Oops...',
                            text: 'Bạn cần phải login trước khi thả tym hoặc gửi comment!'
                        });
                    }
                }
            });
        });
    });
</script>
